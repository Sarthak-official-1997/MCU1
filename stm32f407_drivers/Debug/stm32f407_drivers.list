
stm32f407_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d14  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ebc  08000ebc  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ebc  08000ebc  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08000ebc  08000ebc  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ebc  08000ebc  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ebc  08000ebc  00010ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ec0  08000ec0  00010ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08000ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  2000002c  08000ef0  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08000ef0  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000305d  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000074c  00000000  00000000  000230b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001e0  00000000  00000000  00023808  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001a8  00000000  00000000  000239e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002de5  00000000  00000000  00023b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001839  00000000  00000000  00026975  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000bce6  00000000  00000000  000281ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00033e94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000744  00000000  00000000  00033f10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000ea4 	.word	0x08000ea4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000030 	.word	0x20000030
 80001e4:	08000ea4 	.word	0x08000ea4

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <I2C1_GPIOInits>:
 * PB9 -> SDA
 * MY_ADDR = 0x61
 *
 */
void I2C1_GPIOInits(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 GPIO_Handle_t I2CPins;

 I2CPins.pGPIOx=GPIOB;
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <I2C1_GPIOInits+0x40>)
 8000200:	607b      	str	r3, [r7, #4]
 I2CPins.GPIO_PinConfig.Pin_Mode=GPIO_MODE_ALTFUNC;
 8000202:	2302      	movs	r3, #2
 8000204:	727b      	strb	r3, [r7, #9]
 I2CPins.GPIO_PinConfig.Pin_OType=GPIO_OTYPE_OD;   //must for i2c
 8000206:	2301      	movs	r3, #1
 8000208:	733b      	strb	r3, [r7, #12]
 I2CPins.GPIO_PinConfig.Pin_PuPdType=GPIO_PUPD_PU;
 800020a:	2301      	movs	r3, #1
 800020c:	72fb      	strb	r3, [r7, #11]
 I2CPins.GPIO_PinConfig.Pin_AltFuncMode=4;
 800020e:	2304      	movs	r3, #4
 8000210:	737b      	strb	r3, [r7, #13]
 I2CPins.GPIO_PinConfig.Pin_Speed=GPIO_OSPEED_HIGH;
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]

 //scl
 I2CPins.GPIO_PinConfig.Pin_Num=PIN_6;
 8000216:	2306      	movs	r3, #6
 8000218:	723b      	strb	r3, [r7, #8]
 GPIO_Init(&I2CPins);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f8b5 	bl	800038c <GPIO_Init>

 //sda
 I2CPins.GPIO_PinConfig.Pin_Num=PIN_9;
 8000222:	2309      	movs	r3, #9
 8000224:	723b      	strb	r3, [r7, #8]
 GPIO_Init(&I2CPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f8af 	bl	800038c <GPIO_Init>

}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40020400 	.word	0x40020400

0800023c <I2C1_Inits>:
I2C_Handle_t I2C1handle;
void I2C1_Inits(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0


 I2C1handle.pI2Cx=I2C1;
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <I2C1_Inits+0x2c>)
 8000242:	4a0a      	ldr	r2, [pc, #40]	; (800026c <I2C1_Inits+0x30>)
 8000244:	601a      	str	r2, [r3, #0]
 I2C1handle.I2C_Config.I2C_ACKControl=I2C_ACK_EN;
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <I2C1_Inits+0x2c>)
 8000248:	2201      	movs	r2, #1
 800024a:	60da      	str	r2, [r3, #12]
 I2C1handle.I2C_Config.I2C_DeviceAddress=MY_ADDR;
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <I2C1_Inits+0x2c>)
 800024e:	2261      	movs	r2, #97	; 0x61
 8000250:	721a      	strb	r2, [r3, #8]
 I2C1handle.I2C_Config.I2C_FMDutyCycle=I2C_FM_DUTY_2;
 8000252:	4b05      	ldr	r3, [pc, #20]	; (8000268 <I2C1_Inits+0x2c>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
 I2C1handle.I2C_Config.I2C_SCLSpeed=I2C_SCL_SPEED_SM;
 8000258:	4b03      	ldr	r3, [pc, #12]	; (8000268 <I2C1_Inits+0x2c>)
 800025a:	4a05      	ldr	r2, [pc, #20]	; (8000270 <I2C1_Inits+0x34>)
 800025c:	605a      	str	r2, [r3, #4]

 I2C_Init(&I2C1handle);
 800025e:	4802      	ldr	r0, [pc, #8]	; (8000268 <I2C1_Inits+0x2c>)
 8000260:	f000 fcb8 	bl	8000bd4 <I2C_Init>
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000048 	.word	0x20000048
 800026c:	40005400 	.word	0x40005400
 8000270:	000186a0 	.word	0x000186a0

08000274 <GPIO_btnInit>:

void GPIO_btnInit()
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b086      	sub	sp, #24
 8000278:	af02      	add	r7, sp, #8
	GPIO_Handle_t gpiobtn;

	 GPIO_input(&gpiobtn ,GPIOA, PIN_0,GPIO_MODE_INPUT, GPIO_OSPEED_HIGH, GPIO_PUPD_PU);
 800027a:	1d38      	adds	r0, r7, #4
 800027c:	2301      	movs	r3, #1
 800027e:	9301      	str	r3, [sp, #4]
 8000280:	2302      	movs	r3, #2
 8000282:	9300      	str	r3, [sp, #0]
 8000284:	2300      	movs	r3, #0
 8000286:	2200      	movs	r2, #0
 8000288:	4908      	ldr	r1, [pc, #32]	; (80002ac <GPIO_btnInit+0x38>)
 800028a:	f000 fb3b 	bl	8000904 <GPIO_input>
	 GPIOA_PCLK_EN();
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <GPIO_btnInit+0x3c>)
 8000290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000292:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <GPIO_btnInit+0x3c>)
 8000294:	f043 0301 	orr.w	r3, r3, #1
 8000298:	6313      	str	r3, [r2, #48]	; 0x30
	 GPIO_Init(&gpiobtn);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f875 	bl	800038c <GPIO_Init>
}
 80002a2:	bf00      	nop
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40020000 	.word	0x40020000
 80002b0:	40023800 	.word	0x40023800

080002b4 <delay>:

void delay(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
	for(uint32_t i=0;i<5000000/2;i++);
 80002ba:	2300      	movs	r3, #0
 80002bc:	607b      	str	r3, [r7, #4]
 80002be:	e002      	b.n	80002c6 <delay+0x12>
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	3301      	adds	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a04      	ldr	r2, [pc, #16]	; (80002dc <delay+0x28>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d9f8      	bls.n	80002c0 <delay+0xc>
}
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	0026259f 	.word	0x0026259f

080002e0 <main>:
int main()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af02      	add	r7, sp, #8
	GPIO_btnInit();
 80002e6:	f7ff ffc5 	bl	8000274 <GPIO_btnInit>

    //i2c pin initialise ..gpio pin as i2c pin
	I2C1_GPIOInits();
 80002ea:	f7ff ff85 	bl	80001f8 <I2C1_GPIOInits>
	//i2c peripheral configuration
	I2C1_Inits();
 80002ee:	f7ff ffa5 	bl	800023c <I2C1_Inits>

	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80002f2:	2101      	movs	r1, #1
 80002f4:	480c      	ldr	r0, [pc, #48]	; (8000328 <main+0x48>)
 80002f6:	f000 fb93 	bl	8000a20 <I2C_PeripheralControl>
	while(1)
	{
		//wait till button is pressed
		while(! GPIO_ReadPin(GPIOA, PIN_0));
 80002fa:	bf00      	nop
 80002fc:	2100      	movs	r1, #0
 80002fe:	480b      	ldr	r0, [pc, #44]	; (800032c <main+0x4c>)
 8000300:	f000 fae8 	bl	80008d4 <GPIO_ReadPin>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0f8      	beq.n	80002fc <main+0x1c>
		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 800030a:	f7ff ffd3 	bl	80002b4 <delay>


        //send some data to slave
        I2C_MasterSendData(&I2C1handle,somedata, strlen((char*)somedata), SLAVE_ADDR , I2C1);
 800030e:	4808      	ldr	r0, [pc, #32]	; (8000330 <main+0x50>)
 8000310:	f7ff ff6a 	bl	80001e8 <strlen>
 8000314:	4602      	mov	r2, r0
 8000316:	2300      	movs	r3, #0
 8000318:	9300      	str	r3, [sp, #0]
 800031a:	2368      	movs	r3, #104	; 0x68
 800031c:	4904      	ldr	r1, [pc, #16]	; (8000330 <main+0x50>)
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <main+0x54>)
 8000320:	f000 fd1c 	bl	8000d5c <I2C_MasterSendData>
		while(! GPIO_ReadPin(GPIOA, PIN_0));
 8000324:	e7e9      	b.n	80002fa <main+0x1a>
 8000326:	bf00      	nop
 8000328:	40005400 	.word	0x40005400
 800032c:	40020000 	.word	0x40020000
 8000330:	20000000 	.word	0x20000000
 8000334:	20000048 	.word	0x20000048

08000338 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000338:	480d      	ldr	r0, [pc, #52]	; (8000370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800033c:	480d      	ldr	r0, [pc, #52]	; (8000374 <LoopForever+0x6>)
  ldr r1, =_edata
 800033e:	490e      	ldr	r1, [pc, #56]	; (8000378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000340:	4a0e      	ldr	r2, [pc, #56]	; (800037c <LoopForever+0xe>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000344:	e002      	b.n	800034c <LoopCopyDataInit>

08000346 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000346:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000348:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034a:	3304      	adds	r3, #4

0800034c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800034c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000350:	d3f9      	bcc.n	8000346 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000352:	4a0b      	ldr	r2, [pc, #44]	; (8000380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000354:	4c0b      	ldr	r4, [pc, #44]	; (8000384 <LoopForever+0x16>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000358:	e001      	b.n	800035e <LoopFillZerobss>

0800035a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800035c:	3204      	adds	r2, #4

0800035e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000360:	d3fb      	bcc.n	800035a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000362:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000366:	f000 fd79 	bl	8000e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036a:	f7ff ffb9 	bl	80002e0 <main>

0800036e <LoopForever>:

LoopForever:
    b LoopForever
 800036e:	e7fe      	b.n	800036e <LoopForever>
  ldr   r0, =_estack
 8000370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000378:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 800037c:	08000ec4 	.word	0x08000ec4
  ldr r2, =_sbss
 8000380:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000384:	20000078 	.word	0x20000078

08000388 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC_IRQHandler>
	...

0800038c <GPIO_Init>:
 *
 *
 **************************************************************************************************/

void GPIO_Init(GPIO_Handle_t  *pGPIOx_handle) // used for configuring the port and pin setting
 {   //peripheral clcok enable
 800038c:	b580      	push	{r7, lr}
 800038e:	b086      	sub	sp, #24
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	GPIO_PclkControl(pGPIOx_handle->pGPIOx, ENABLE);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2101      	movs	r1, #1
 800039a:	4618      	mov	r0, r3
 800039c:	f000 f9b0 	bl	8000700 <GPIO_PclkControl>


/*/***********************************************  1.config the mode of GPIO pin   **********************************************************/
	uint32_t vola tempGPIO=0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60bb      	str	r3, [r7, #8]


	if(pGPIOx_handle->GPIO_PinConfig.Pin_Mode <= GPIO_MODE_ANALOG /*3*/)   //0 to 3 are normal modes ,4,5and 6 are IT (interrupt) modes
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	795b      	ldrb	r3, [r3, #5]
 80003a8:	2b03      	cmp	r3, #3
 80003aa:	d81f      	bhi.n	80003ec <GPIO_Init+0x60>
	{
      tempGPIO = pGPIOx_handle->GPIO_PinConfig.Pin_Mode << (2 * pGPIOx_handle->GPIO_PinConfig.Pin_Num);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	795b      	ldrb	r3, [r3, #5]
 80003b0:	461a      	mov	r2, r3
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	791b      	ldrb	r3, [r3, #4]
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	fa02 f303 	lsl.w	r3, r2, r3
 80003bc:	60bb      	str	r3, [r7, #8]
      pGPIOx_handle->pGPIOx->MODER &=~(0x3 << pGPIOx_handle->GPIO_PinConfig.Pin_Num);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	791b      	ldrb	r3, [r3, #4]
 80003c8:	4619      	mov	r1, r3
 80003ca:	2303      	movs	r3, #3
 80003cc:	408b      	lsls	r3, r1
 80003ce:	43db      	mvns	r3, r3
 80003d0:	4619      	mov	r1, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	400a      	ands	r2, r1
 80003d8:	601a      	str	r2, [r3, #0]
      pGPIOx_handle->pGPIOx->MODER |= tempGPIO;
 80003da:	68b9      	ldr	r1, [r7, #8]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	430a      	orrs	r2, r1
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	e0e4      	b.n	80005b6 <GPIO_Init+0x22a>
	* 1. Config the RT and FT and RFT
	* 2. Config GPIO port selection in SYSCFG_EXTICR
	* 3. Enable EXTI interrupt delivery using IMR (interrupt mask register)
	*/

		if(pGPIOx_handle->GPIO_PinConfig.Pin_Mode == GPIO_MODE_IT_FT)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	795b      	ldrb	r3, [r3, #5]
 80003f0:	2b04      	cmp	r3, #4
 80003f2:	d117      	bne.n	8000424 <GPIO_Init+0x98>
		{  //config FTSR
            EXTI->FTSR |= (1<< pGPIOx_handle->GPIO_PinConfig.Pin_Num);
 80003f4:	4b59      	ldr	r3, [pc, #356]	; (800055c <GPIO_Init+0x1d0>)
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	7912      	ldrb	r2, [r2, #4]
 80003fc:	4611      	mov	r1, r2
 80003fe:	2201      	movs	r2, #1
 8000400:	408a      	lsls	r2, r1
 8000402:	4611      	mov	r1, r2
 8000404:	4a55      	ldr	r2, [pc, #340]	; (800055c <GPIO_Init+0x1d0>)
 8000406:	430b      	orrs	r3, r1
 8000408:	60d3      	str	r3, [r2, #12]

            //but same time clear RTSR for safety
            EXTI->RTSR &= ~(1<< pGPIOx_handle->GPIO_PinConfig.Pin_Num);
 800040a:	4b54      	ldr	r3, [pc, #336]	; (800055c <GPIO_Init+0x1d0>)
 800040c:	689b      	ldr	r3, [r3, #8]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	7912      	ldrb	r2, [r2, #4]
 8000412:	4611      	mov	r1, r2
 8000414:	2201      	movs	r2, #1
 8000416:	408a      	lsls	r2, r1
 8000418:	43d2      	mvns	r2, r2
 800041a:	4611      	mov	r1, r2
 800041c:	4a4f      	ldr	r2, [pc, #316]	; (800055c <GPIO_Init+0x1d0>)
 800041e:	400b      	ands	r3, r1
 8000420:	6093      	str	r3, [r2, #8]
 8000422:	e04d      	b.n	80004c0 <GPIO_Init+0x134>
		}
		else if(pGPIOx_handle->GPIO_PinConfig.Pin_Mode == GPIO_MODE_IT_RT)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	795b      	ldrb	r3, [r3, #5]
 8000428:	2b05      	cmp	r3, #5
 800042a:	d117      	bne.n	800045c <GPIO_Init+0xd0>
		{  //config RTSR
			EXTI->RTSR |= (1<< pGPIOx_handle->GPIO_PinConfig.Pin_Num);
 800042c:	4b4b      	ldr	r3, [pc, #300]	; (800055c <GPIO_Init+0x1d0>)
 800042e:	689b      	ldr	r3, [r3, #8]
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	7912      	ldrb	r2, [r2, #4]
 8000434:	4611      	mov	r1, r2
 8000436:	2201      	movs	r2, #1
 8000438:	408a      	lsls	r2, r1
 800043a:	4611      	mov	r1, r2
 800043c:	4a47      	ldr	r2, [pc, #284]	; (800055c <GPIO_Init+0x1d0>)
 800043e:	430b      	orrs	r3, r1
 8000440:	6093      	str	r3, [r2, #8]

			//but same time clear FETSR for safety
			EXTI->FTSR &= ~(1<< pGPIOx_handle->GPIO_PinConfig.Pin_Num);
 8000442:	4b46      	ldr	r3, [pc, #280]	; (800055c <GPIO_Init+0x1d0>)
 8000444:	68db      	ldr	r3, [r3, #12]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	7912      	ldrb	r2, [r2, #4]
 800044a:	4611      	mov	r1, r2
 800044c:	2201      	movs	r2, #1
 800044e:	408a      	lsls	r2, r1
 8000450:	43d2      	mvns	r2, r2
 8000452:	4611      	mov	r1, r2
 8000454:	4a41      	ldr	r2, [pc, #260]	; (800055c <GPIO_Init+0x1d0>)
 8000456:	400b      	ands	r3, r1
 8000458:	60d3      	str	r3, [r2, #12]
 800045a:	e031      	b.n	80004c0 <GPIO_Init+0x134>
		}else if(pGPIOx_handle->GPIO_PinConfig.Pin_Mode == GPIO_MODE_IT_RFT)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	795b      	ldrb	r3, [r3, #5]
 8000460:	2b06      	cmp	r3, #6
 8000462:	d12d      	bne.n	80004c0 <GPIO_Init+0x134>
		{   //config both RTSR and FTSR
			EXTI->RTSR &= ~(1<< pGPIOx_handle->GPIO_PinConfig.Pin_Num); //Clearing of
 8000464:	4b3d      	ldr	r3, [pc, #244]	; (800055c <GPIO_Init+0x1d0>)
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	7912      	ldrb	r2, [r2, #4]
 800046c:	4611      	mov	r1, r2
 800046e:	2201      	movs	r2, #1
 8000470:	408a      	lsls	r2, r1
 8000472:	43d2      	mvns	r2, r2
 8000474:	4611      	mov	r1, r2
 8000476:	4a39      	ldr	r2, [pc, #228]	; (800055c <GPIO_Init+0x1d0>)
 8000478:	400b      	ands	r3, r1
 800047a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1<< pGPIOx_handle->GPIO_PinConfig.Pin_Num); //both of them first...
 800047c:	4b37      	ldr	r3, [pc, #220]	; (800055c <GPIO_Init+0x1d0>)
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	7912      	ldrb	r2, [r2, #4]
 8000484:	4611      	mov	r1, r2
 8000486:	2201      	movs	r2, #1
 8000488:	408a      	lsls	r2, r1
 800048a:	43d2      	mvns	r2, r2
 800048c:	4611      	mov	r1, r2
 800048e:	4a33      	ldr	r2, [pc, #204]	; (800055c <GPIO_Init+0x1d0>)
 8000490:	400b      	ands	r3, r1
 8000492:	60d3      	str	r3, [r2, #12]

			EXTI->RTSR |= (1<< pGPIOx_handle->GPIO_PinConfig.Pin_Num);  //Now setting
 8000494:	4b31      	ldr	r3, [pc, #196]	; (800055c <GPIO_Init+0x1d0>)
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	7912      	ldrb	r2, [r2, #4]
 800049c:	4611      	mov	r1, r2
 800049e:	2201      	movs	r2, #1
 80004a0:	408a      	lsls	r2, r1
 80004a2:	4611      	mov	r1, r2
 80004a4:	4a2d      	ldr	r2, [pc, #180]	; (800055c <GPIO_Init+0x1d0>)
 80004a6:	430b      	orrs	r3, r1
 80004a8:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1<< pGPIOx_handle->GPIO_PinConfig.Pin_Num);  //both of them.
 80004aa:	4b2c      	ldr	r3, [pc, #176]	; (800055c <GPIO_Init+0x1d0>)
 80004ac:	68db      	ldr	r3, [r3, #12]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	7912      	ldrb	r2, [r2, #4]
 80004b2:	4611      	mov	r1, r2
 80004b4:	2201      	movs	r2, #1
 80004b6:	408a      	lsls	r2, r1
 80004b8:	4611      	mov	r1, r2
 80004ba:	4a28      	ldr	r2, [pc, #160]	; (800055c <GPIO_Init+0x1d0>)
 80004bc:	430b      	orrs	r3, r1
 80004be:	60d3      	str	r3, [r2, #12]
		}


		//2. Config GPIO port selection in SYSCFG_EXTICR
		     uint8_t temp1,temp2;
		         temp1 = pGPIOx_handle->GPIO_PinConfig.Pin_Num / 4 ;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	791b      	ldrb	r3, [r3, #4]
 80004c4:	089b      	lsrs	r3, r3, #2
 80004c6:	75fb      	strb	r3, [r7, #23]
		         temp2 = pGPIOx_handle->GPIO_PinConfig.Pin_Num % 4;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	791b      	ldrb	r3, [r3, #4]
 80004cc:	f003 0303 	and.w	r3, r3, #3
 80004d0:	75bb      	strb	r3, [r7, #22]
		         SYSCFG_PCLK_EN();
 80004d2:	4b23      	ldr	r3, [pc, #140]	; (8000560 <GPIO_Init+0x1d4>)
 80004d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004d6:	4a22      	ldr	r2, [pc, #136]	; (8000560 <GPIO_Init+0x1d4>)
 80004d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004dc:	6453      	str	r3, [r2, #68]	; 0x44
		     uint32_t portcode;
		         portcode =GPIO_BASEADDR_TO_ITS_CODE(pGPIOx_handle->pGPIOx);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a20      	ldr	r2, [pc, #128]	; (8000564 <GPIO_Init+0x1d8>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d04f      	beq.n	8000588 <GPIO_Init+0x1fc>
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a1e      	ldr	r2, [pc, #120]	; (8000568 <GPIO_Init+0x1dc>)
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d032      	beq.n	8000558 <GPIO_Init+0x1cc>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a1d      	ldr	r2, [pc, #116]	; (800056c <GPIO_Init+0x1e0>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d02b      	beq.n	8000554 <GPIO_Init+0x1c8>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a1b      	ldr	r2, [pc, #108]	; (8000570 <GPIO_Init+0x1e4>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d024      	beq.n	8000550 <GPIO_Init+0x1c4>
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a1a      	ldr	r2, [pc, #104]	; (8000574 <GPIO_Init+0x1e8>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d01d      	beq.n	800054c <GPIO_Init+0x1c0>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a18      	ldr	r2, [pc, #96]	; (8000578 <GPIO_Init+0x1ec>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d016      	beq.n	8000548 <GPIO_Init+0x1bc>
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a17      	ldr	r2, [pc, #92]	; (800057c <GPIO_Init+0x1f0>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d00f      	beq.n	8000544 <GPIO_Init+0x1b8>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a15      	ldr	r2, [pc, #84]	; (8000580 <GPIO_Init+0x1f4>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d008      	beq.n	8000540 <GPIO_Init+0x1b4>
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a14      	ldr	r2, [pc, #80]	; (8000584 <GPIO_Init+0x1f8>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d101      	bne.n	800053c <GPIO_Init+0x1b0>
 8000538:	2308      	movs	r3, #8
 800053a:	e026      	b.n	800058a <GPIO_Init+0x1fe>
 800053c:	2300      	movs	r3, #0
 800053e:	e024      	b.n	800058a <GPIO_Init+0x1fe>
 8000540:	2307      	movs	r3, #7
 8000542:	e022      	b.n	800058a <GPIO_Init+0x1fe>
 8000544:	2306      	movs	r3, #6
 8000546:	e020      	b.n	800058a <GPIO_Init+0x1fe>
 8000548:	2305      	movs	r3, #5
 800054a:	e01e      	b.n	800058a <GPIO_Init+0x1fe>
 800054c:	2304      	movs	r3, #4
 800054e:	e01c      	b.n	800058a <GPIO_Init+0x1fe>
 8000550:	2303      	movs	r3, #3
 8000552:	e01a      	b.n	800058a <GPIO_Init+0x1fe>
 8000554:	2302      	movs	r3, #2
 8000556:	e018      	b.n	800058a <GPIO_Init+0x1fe>
 8000558:	2301      	movs	r3, #1
 800055a:	e016      	b.n	800058a <GPIO_Init+0x1fe>
 800055c:	40013c00 	.word	0x40013c00
 8000560:	40023800 	.word	0x40023800
 8000564:	40020000 	.word	0x40020000
 8000568:	40020400 	.word	0x40020400
 800056c:	40020800 	.word	0x40020800
 8000570:	40020c00 	.word	0x40020c00
 8000574:	40021000 	.word	0x40021000
 8000578:	40021400 	.word	0x40021400
 800057c:	40021800 	.word	0x40021800
 8000580:	40021c00 	.word	0x40021c00
 8000584:	40022000 	.word	0x40022000
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]
                 SYSCFG->EXTICR[temp1] =  portcode << (4 *temp2);
 800058c:	7dbb      	ldrb	r3, [r7, #22]
 800058e:	009a      	lsls	r2, r3, #2
 8000590:	4859      	ldr	r0, [pc, #356]	; (80006f8 <GPIO_Init+0x36c>)
 8000592:	7dfb      	ldrb	r3, [r7, #23]
 8000594:	6939      	ldr	r1, [r7, #16]
 8000596:	fa01 f202 	lsl.w	r2, r1, r2
 800059a:	3302      	adds	r3, #2
 800059c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		//3. Enable EXTI interrupt delivery using IMR (interrupt mask register)
		    EXTI->IMR |= (1<< pGPIOx_handle->GPIO_PinConfig.Pin_Num);
 80005a0:	4b56      	ldr	r3, [pc, #344]	; (80006fc <GPIO_Init+0x370>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	7912      	ldrb	r2, [r2, #4]
 80005a8:	4611      	mov	r1, r2
 80005aa:	2201      	movs	r2, #1
 80005ac:	408a      	lsls	r2, r1
 80005ae:	4611      	mov	r1, r2
 80005b0:	4a52      	ldr	r2, [pc, #328]	; (80006fc <GPIO_Init+0x370>)
 80005b2:	430b      	orrs	r3, r1
 80005b4:	6013      	str	r3, [r2, #0]

	}
/*/****************************************************  2.config the Ospeed  **********************************************************************/
	tempGPIO=0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
	tempGPIO = pGPIOx_handle->GPIO_PinConfig.Pin_Speed << (2* pGPIOx_handle->GPIO_PinConfig.Pin_Num);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	799b      	ldrb	r3, [r3, #6]
 80005be:	461a      	mov	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	60bb      	str	r3, [r7, #8]
	pGPIOx_handle->pGPIOx->OSPEEDR &=~(0x3 << pGPIOx_handle->GPIO_PinConfig.Pin_Num);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	689a      	ldr	r2, [r3, #8]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	791b      	ldrb	r3, [r3, #4]
 80005d6:	4619      	mov	r1, r3
 80005d8:	2303      	movs	r3, #3
 80005da:	408b      	lsls	r3, r1
 80005dc:	43db      	mvns	r3, r3
 80005de:	4619      	mov	r1, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	400a      	ands	r2, r1
 80005e6:	609a      	str	r2, [r3, #8]
	pGPIOx_handle->pGPIOx->OSPEEDR |= tempGPIO;
 80005e8:	68b9      	ldr	r1, [r7, #8]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	689a      	ldr	r2, [r3, #8]
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	430a      	orrs	r2, r1
 80005f6:	609a      	str	r2, [r3, #8]


/*/***************************************************   3.config the PUPD    **********************************************************************/
	tempGPIO=0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
	tempGPIO = pGPIOx_handle->GPIO_PinConfig.Pin_PuPdType << (2 *pGPIOx_handle->GPIO_PinConfig.Pin_Num);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	79db      	ldrb	r3, [r3, #7]
 8000600:	461a      	mov	r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	791b      	ldrb	r3, [r3, #4]
 8000606:	005b      	lsls	r3, r3, #1
 8000608:	fa02 f303 	lsl.w	r3, r2, r3
 800060c:	60bb      	str	r3, [r7, #8]
	pGPIOx_handle->pGPIOx->PUPDR &=~(0x3 << pGPIOx_handle->GPIO_PinConfig.Pin_Num);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	68da      	ldr	r2, [r3, #12]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	791b      	ldrb	r3, [r3, #4]
 8000618:	4619      	mov	r1, r3
 800061a:	2303      	movs	r3, #3
 800061c:	408b      	lsls	r3, r1
 800061e:	43db      	mvns	r3, r3
 8000620:	4619      	mov	r1, r3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	400a      	ands	r2, r1
 8000628:	60da      	str	r2, [r3, #12]
	pGPIOx_handle->pGPIOx->PUPDR |=tempGPIO;
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	68da      	ldr	r2, [r3, #12]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	430a      	orrs	r2, r1
 8000638:	60da      	str	r2, [r3, #12]

/*/***************************************************   4.config the Otype   **********************************************************************/
	tempGPIO=0;
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
	tempGPIO= pGPIOx_handle->GPIO_PinConfig.Pin_OType << (1 * pGPIOx_handle->GPIO_PinConfig.Pin_OType);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	7a1b      	ldrb	r3, [r3, #8]
 8000642:	461a      	mov	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	7a1b      	ldrb	r3, [r3, #8]
 8000648:	fa02 f303 	lsl.w	r3, r2, r3
 800064c:	60bb      	str	r3, [r7, #8]
	pGPIOx_handle->pGPIOx->OTYPER &=~(0x1 << pGPIOx_handle->GPIO_PinConfig.Pin_Num);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	685a      	ldr	r2, [r3, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	791b      	ldrb	r3, [r3, #4]
 8000658:	4619      	mov	r1, r3
 800065a:	2301      	movs	r3, #1
 800065c:	408b      	lsls	r3, r1
 800065e:	43db      	mvns	r3, r3
 8000660:	4619      	mov	r1, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	400a      	ands	r2, r1
 8000668:	605a      	str	r2, [r3, #4]
	pGPIOx_handle->pGPIOx->OTYPER |=tempGPIO;
 800066a:	68b9      	ldr	r1, [r7, #8]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	685a      	ldr	r2, [r3, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	430a      	orrs	r2, r1
 8000678:	605a      	str	r2, [r3, #4]

/*/***************************************************   5.config the Alternate Functionalities   **************************************************/
	if(pGPIOx_handle->GPIO_PinConfig.Pin_Mode == GPIO_MODE_ALTFUNC)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	795b      	ldrb	r3, [r3, #5]
 800067e:	2b02      	cmp	r3, #2
 8000680:	d135      	bne.n	80006ee <GPIO_Init+0x362>
	{
		uint8_t temp1=0 ,temp2=0;
 8000682:	2300      	movs	r3, #0
 8000684:	73fb      	strb	r3, [r7, #15]
 8000686:	2300      	movs	r3, #0
 8000688:	73bb      	strb	r3, [r7, #14]
		 temp1=pGPIOx_handle->GPIO_PinConfig.Pin_Num / 8;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	08db      	lsrs	r3, r3, #3
 8000690:	73fb      	strb	r3, [r7, #15]
		 temp2=pGPIOx_handle->GPIO_PinConfig.Pin_Num % 8;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	73bb      	strb	r3, [r7, #14]
		 pGPIOx_handle->pGPIOx->AFR[temp1] &=~(0xF << (4*temp2));
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	7bfa      	ldrb	r2, [r7, #15]
 80006a2:	3208      	adds	r2, #8
 80006a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006a8:	7bbb      	ldrb	r3, [r7, #14]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	220f      	movs	r2, #15
 80006ae:	fa02 f303 	lsl.w	r3, r2, r3
 80006b2:	43db      	mvns	r3, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	7bfa      	ldrb	r2, [r7, #15]
 80006bc:	4001      	ands	r1, r0
 80006be:	3208      	adds	r2, #8
 80006c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		 pGPIOx_handle->pGPIOx->AFR[temp1] |= pGPIOx_handle->GPIO_PinConfig.Pin_AltFuncMode << (4 * temp2);
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	7bfa      	ldrb	r2, [r7, #15]
 80006ca:	3208      	adds	r2, #8
 80006cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	7a5b      	ldrb	r3, [r3, #9]
 80006d4:	461a      	mov	r2, r3
 80006d6:	7bbb      	ldrb	r3, [r7, #14]
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	7bfa      	ldrb	r2, [r7, #15]
 80006e6:	4301      	orrs	r1, r0
 80006e8:	3208      	adds	r2, #8
 80006ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 80006ee:	bf00      	nop
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40013800 	.word	0x40013800
 80006fc:	40013c00 	.word	0x40013c00

08000700 <GPIO_PclkControl>:
 * @Note      - none
 *
 *
 **************************************************************************************************/
void GPIO_PclkControl(GPIO_RegisDef_t * pGPIOx , uint8_t EnorDis)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	70fb      	strb	r3, [r7, #3]
	if( EnorDis == ENABLE )
 800070c:	78fb      	ldrb	r3, [r7, #3]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d161      	bne.n	80007d6 <GPIO_PclkControl+0xd6>
	{
		if( pGPIOx == GPIOA )
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a65      	ldr	r2, [pc, #404]	; (80008ac <GPIO_PclkControl+0x1ac>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d106      	bne.n	8000728 <GPIO_PclkControl+0x28>
		{
			GPIOA_PCLK_EN();
 800071a:	4b65      	ldr	r3, [pc, #404]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a64      	ldr	r2, [pc, #400]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	e056      	b.n	80007d6 <GPIO_PclkControl+0xd6>
		}
		else if( pGPIOx == GPIOB)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a62      	ldr	r2, [pc, #392]	; (80008b4 <GPIO_PclkControl+0x1b4>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d106      	bne.n	800073e <GPIO_PclkControl+0x3e>
		{
			GPIOB_PCLK_EN();
 8000730:	4b5f      	ldr	r3, [pc, #380]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	4a5e      	ldr	r2, [pc, #376]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 8000736:	f043 0302 	orr.w	r3, r3, #2
 800073a:	6313      	str	r3, [r2, #48]	; 0x30
 800073c:	e04b      	b.n	80007d6 <GPIO_PclkControl+0xd6>
		}
		else if ( pGPIOx == GPIOC)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4a5d      	ldr	r2, [pc, #372]	; (80008b8 <GPIO_PclkControl+0x1b8>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d106      	bne.n	8000754 <GPIO_PclkControl+0x54>
		{
			GPIOC_PCLK_EN();
 8000746:	4b5a      	ldr	r3, [pc, #360]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a59      	ldr	r2, [pc, #356]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	e040      	b.n	80007d6 <GPIO_PclkControl+0xd6>
		}else if ( pGPIOx == GPIOD)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a59      	ldr	r2, [pc, #356]	; (80008bc <GPIO_PclkControl+0x1bc>)
 8000758:	4293      	cmp	r3, r2
 800075a:	d106      	bne.n	800076a <GPIO_PclkControl+0x6a>
		{
			GPIOD_PCLK_EN();
 800075c:	4b54      	ldr	r3, [pc, #336]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 800075e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000760:	4a53      	ldr	r2, [pc, #332]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 8000762:	f043 0308 	orr.w	r3, r3, #8
 8000766:	6313      	str	r3, [r2, #48]	; 0x30
 8000768:	e035      	b.n	80007d6 <GPIO_PclkControl+0xd6>
		}else if ( pGPIOx == GPIOE)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a54      	ldr	r2, [pc, #336]	; (80008c0 <GPIO_PclkControl+0x1c0>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d106      	bne.n	8000780 <GPIO_PclkControl+0x80>
		{
			GPIOE_PCLK_EN();
 8000772:	4b4f      	ldr	r3, [pc, #316]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a4e      	ldr	r2, [pc, #312]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 8000778:	f043 0310 	orr.w	r3, r3, #16
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	e02a      	b.n	80007d6 <GPIO_PclkControl+0xd6>
		}else if ( pGPIOx == GPIOF)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a50      	ldr	r2, [pc, #320]	; (80008c4 <GPIO_PclkControl+0x1c4>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d106      	bne.n	8000796 <GPIO_PclkControl+0x96>
		{
			GPIOF_PCLK_EN();
 8000788:	4b49      	ldr	r3, [pc, #292]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 800078a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078c:	4a48      	ldr	r2, [pc, #288]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 800078e:	f043 0320 	orr.w	r3, r3, #32
 8000792:	6313      	str	r3, [r2, #48]	; 0x30
 8000794:	e01f      	b.n	80007d6 <GPIO_PclkControl+0xd6>
		}else if ( pGPIOx == GPIOG)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4a4b      	ldr	r2, [pc, #300]	; (80008c8 <GPIO_PclkControl+0x1c8>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d106      	bne.n	80007ac <GPIO_PclkControl+0xac>
		{
			GPIOG_PCLK_EN();
 800079e:	4b44      	ldr	r3, [pc, #272]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a43      	ldr	r2, [pc, #268]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 80007a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	e014      	b.n	80007d6 <GPIO_PclkControl+0xd6>
		}else if ( pGPIOx == GPIOH)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	4a47      	ldr	r2, [pc, #284]	; (80008cc <GPIO_PclkControl+0x1cc>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d106      	bne.n	80007c2 <GPIO_PclkControl+0xc2>
		{
			GPIOH_PCLK_EN();
 80007b4:	4b3e      	ldr	r3, [pc, #248]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	4a3d      	ldr	r2, [pc, #244]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 80007ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007be:	6313      	str	r3, [r2, #48]	; 0x30
 80007c0:	e009      	b.n	80007d6 <GPIO_PclkControl+0xd6>
		}else if ( pGPIOx == GPIOI)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a42      	ldr	r2, [pc, #264]	; (80008d0 <GPIO_PclkControl+0x1d0>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d105      	bne.n	80007d6 <GPIO_PclkControl+0xd6>
		{
			GPIOI_PCLK_EN();
 80007ca:	4b39      	ldr	r3, [pc, #228]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a38      	ldr	r2, [pc, #224]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 80007d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
		}

	}// end of ENABLE
	if( EnorDis == DISABLE )
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d161      	bne.n	80008a0 <GPIO_PclkControl+0x1a0>
	{
		if( pGPIOx == GPIOA )
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a33      	ldr	r2, [pc, #204]	; (80008ac <GPIO_PclkControl+0x1ac>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d106      	bne.n	80007f2 <GPIO_PclkControl+0xf2>
		{
			GPIOA_PCLK_DIS();
 80007e4:	4b32      	ldr	r3, [pc, #200]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	4a31      	ldr	r2, [pc, #196]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 80007ea:	f023 0301 	bic.w	r3, r3, #1
 80007ee:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOI_PCLK_DIS();
		}

	}// end of DISABLE
}// end of function GPIO_PclckControl
 80007f0:	e056      	b.n	80008a0 <GPIO_PclkControl+0x1a0>
		else if ( pGPIOx == GPIOB)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a2f      	ldr	r2, [pc, #188]	; (80008b4 <GPIO_PclkControl+0x1b4>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d106      	bne.n	8000808 <GPIO_PclkControl+0x108>
			GPIOB_PCLK_DIS();
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a2c      	ldr	r2, [pc, #176]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 8000800:	f023 0302 	bic.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
}// end of function GPIO_PclckControl
 8000806:	e04b      	b.n	80008a0 <GPIO_PclkControl+0x1a0>
		}else if ( pGPIOx == GPIOC)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a2b      	ldr	r2, [pc, #172]	; (80008b8 <GPIO_PclkControl+0x1b8>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d106      	bne.n	800081e <GPIO_PclkControl+0x11e>
			GPIOC_PCLK_DIS();
 8000810:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 8000812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000814:	4a26      	ldr	r2, [pc, #152]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 8000816:	f023 0304 	bic.w	r3, r3, #4
 800081a:	6313      	str	r3, [r2, #48]	; 0x30
}// end of function GPIO_PclckControl
 800081c:	e040      	b.n	80008a0 <GPIO_PclkControl+0x1a0>
		}else if ( pGPIOx == GPIOD)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a26      	ldr	r2, [pc, #152]	; (80008bc <GPIO_PclkControl+0x1bc>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d106      	bne.n	8000834 <GPIO_PclkControl+0x134>
			GPIOD_PCLK_DIS();
 8000826:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 800082c:	f023 0308 	bic.w	r3, r3, #8
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
}// end of function GPIO_PclckControl
 8000832:	e035      	b.n	80008a0 <GPIO_PclkControl+0x1a0>
		}else if ( pGPIOx == GPIOE)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a22      	ldr	r2, [pc, #136]	; (80008c0 <GPIO_PclkControl+0x1c0>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d106      	bne.n	800084a <GPIO_PclkControl+0x14a>
			GPIOE_PCLK_DIS();
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 800083e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000840:	4a1b      	ldr	r2, [pc, #108]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 8000842:	f023 0310 	bic.w	r3, r3, #16
 8000846:	6313      	str	r3, [r2, #48]	; 0x30
}// end of function GPIO_PclckControl
 8000848:	e02a      	b.n	80008a0 <GPIO_PclkControl+0x1a0>
		}else if ( pGPIOx == GPIOF)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a1d      	ldr	r2, [pc, #116]	; (80008c4 <GPIO_PclkControl+0x1c4>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d106      	bne.n	8000860 <GPIO_PclkControl+0x160>
			GPIOF_PCLK_DIS();
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a16      	ldr	r2, [pc, #88]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 8000858:	f023 0320 	bic.w	r3, r3, #32
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
}// end of function GPIO_PclckControl
 800085e:	e01f      	b.n	80008a0 <GPIO_PclkControl+0x1a0>
		}else if ( pGPIOx == GPIOG)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a19      	ldr	r2, [pc, #100]	; (80008c8 <GPIO_PclkControl+0x1c8>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d106      	bne.n	8000876 <GPIO_PclkControl+0x176>
			GPIOG_PCLK_DIS();
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 800086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086c:	4a10      	ldr	r2, [pc, #64]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 800086e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000872:	6313      	str	r3, [r2, #48]	; 0x30
}// end of function GPIO_PclckControl
 8000874:	e014      	b.n	80008a0 <GPIO_PclkControl+0x1a0>
		}else if ( pGPIOx == GPIOH)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a14      	ldr	r2, [pc, #80]	; (80008cc <GPIO_PclkControl+0x1cc>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d106      	bne.n	800088c <GPIO_PclkControl+0x18c>
			GPIOH_PCLK_DIS();
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 8000884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
}// end of function GPIO_PclckControl
 800088a:	e009      	b.n	80008a0 <GPIO_PclkControl+0x1a0>
		}else if ( pGPIOx == GPIOI)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <GPIO_PclkControl+0x1d0>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d105      	bne.n	80008a0 <GPIO_PclkControl+0x1a0>
			GPIOI_PCLK_DIS();
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000898:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <GPIO_PclkControl+0x1b0>)
 800089a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800089e:	6313      	str	r3, [r2, #48]	; 0x30
}// end of function GPIO_PclckControl
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	40020000 	.word	0x40020000
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020400 	.word	0x40020400
 80008b8:	40020800 	.word	0x40020800
 80008bc:	40020c00 	.word	0x40020c00
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40021400 	.word	0x40021400
 80008c8:	40021800 	.word	0x40021800
 80008cc:	40021c00 	.word	0x40021c00
 80008d0:	40022000 	.word	0x40022000

080008d4 <GPIO_ReadPin>:
 * @Note      - none
 *
 *
 **************************************************************************************************/
uint8_t GPIO_ReadPin(GPIO_RegisDef_t * pGPIOx, uint8_t Pin_Num)
{  uint8_t temp=0;
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	70fb      	strb	r3, [r7, #3]
 80008e0:	2300      	movs	r3, #0
 80008e2:	73fb      	strb	r3, [r7, #15]
   // we are reading so we fetch from the Register , not store
  temp=  (uint8_t)   ( (pGPIOx->IDR >> Pin_Num) & 0x1);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	691a      	ldr	r2, [r3, #16]
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	fa22 f303 	lsr.w	r3, r2, r3
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	73fb      	strb	r3, [r7, #15]
   * we typecasted to uint8_t because all registers of RegisDef structure are of uint32_t
   * but temp is of uint8_t
   */


  return temp;
 80008f6:	7bfb      	ldrb	r3, [r7, #15]

}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <GPIO_input>:
	handling_variable->GPIO_PinConfig.Pin_PuPdType=PUPDtype;


}
void GPIO_input(GPIO_Handle_t *handling_variable,GPIO_RegisDef_t * port, uint8_t Pin_Number, uint8_t Mode ,uint8_t Ospeed, uint8_t PUPDtype)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	4611      	mov	r1, r2
 8000910:	461a      	mov	r2, r3
 8000912:	460b      	mov	r3, r1
 8000914:	71fb      	strb	r3, [r7, #7]
 8000916:	4613      	mov	r3, r2
 8000918:	71bb      	strb	r3, [r7, #6]
	    handling_variable->pGPIOx = port;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	68ba      	ldr	r2, [r7, #8]
 800091e:	601a      	str	r2, [r3, #0]
		handling_variable->GPIO_PinConfig.Pin_Num=Pin_Number;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	79fa      	ldrb	r2, [r7, #7]
 8000924:	711a      	strb	r2, [r3, #4]
		handling_variable->GPIO_PinConfig.Pin_Mode=Mode;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	79ba      	ldrb	r2, [r7, #6]
 800092a:	715a      	strb	r2, [r3, #5]
		handling_variable->GPIO_PinConfig.Pin_Speed=Ospeed;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	7e3a      	ldrb	r2, [r7, #24]
 8000930:	719a      	strb	r2, [r3, #6]
		handling_variable->GPIO_PinConfig.Pin_PuPdType=PUPDtype;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	7f3a      	ldrb	r2, [r7, #28]
 8000936:	71da      	strb	r2, [r3, #7]
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegisDef_t *pI2Cx)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	601a      	str	r2, [r3, #0]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <I2C_ExecuteAddressPhaseWrite>:



static void I2C_ExecuteAddressPhaseWrite(I2C_RegisDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8000976:	78fb      	ldrb	r3, [r7, #3]
 8000978:	f023 0301 	bic.w	r3, r3, #1
 800097c:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 800097e:	78fa      	ldrb	r2, [r7, #3]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	60da      	str	r2, [r3, #12]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <I2C_ClearADDRFlag>:
	pI2Cx->DR = SlaveAddr;
}


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d020      	beq.n	80009e8 <I2C_ClearADDRFlag+0x58>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d112      	bne.n	80009d6 <I2C_ClearADDRFlag+0x46>
		{
			if(pI2CHandle->RxSize  == 1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d11f      	bne.n	80009f8 <I2C_ClearADDRFlag+0x68>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 fa2f 	bl	8000e22 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	691b      	ldr	r3, [r3, #16]
 80009ca:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 80009d4:	e010      	b.n	80009f8 <I2C_ClearADDRFlag+0x68>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	691b      	ldr	r3, [r3, #16]
 80009dc:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	60fb      	str	r3, [r7, #12]
}
 80009e6:	e007      	b.n	80009f8 <I2C_ClearADDRFlag+0x68>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	691b      	ldr	r3, [r3, #16]
 80009ee:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	60fb      	str	r3, [r7, #12]
}
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegisDef_t *pI2Cx)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	601a      	str	r2, [r3, #0]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <I2C_PeripheralControl>:
 * @return            -
 *
 * @Note              -
 */
void I2C_PeripheralControl(I2C_RegisDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a2c:	78fb      	ldrb	r3, [r7, #3]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d106      	bne.n	8000a40 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f043 0201 	orr.w	r2, r3, #1
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 8000a3e:	e005      	b.n	8000a4c <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f023 0201 	bic.w	r2, r3, #1
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	601a      	str	r2, [r3, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <I2C_PeriClockControl>:
 * @return            -
 *
 * @Note              -
 */
void I2C_PeriClockControl(I2C_RegisDef_t *pI2Cx, uint8_t EnorDi)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	460b      	mov	r3, r1
 8000a62:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a64:	78fb      	ldrb	r3, [r7, #3]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d120      	bne.n	8000aac <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a24      	ldr	r2, [pc, #144]	; (8000b00 <I2C_PeriClockControl+0xa8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d106      	bne.n	8000a80 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000a72:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <I2C_PeriClockControl+0xac>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a23      	ldr	r2, [pc, #140]	; (8000b04 <I2C_PeriClockControl+0xac>)
 8000a78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
				}
			}

	}

}
 8000a7e:	e038      	b.n	8000af2 <I2C_PeriClockControl+0x9a>
		}else if (pI2Cx == I2C2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a21      	ldr	r2, [pc, #132]	; (8000b08 <I2C_PeriClockControl+0xb0>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d106      	bne.n	8000a96 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000a88:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <I2C_PeriClockControl+0xac>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a1d      	ldr	r2, [pc, #116]	; (8000b04 <I2C_PeriClockControl+0xac>)
 8000a8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a94:	e02d      	b.n	8000af2 <I2C_PeriClockControl+0x9a>
		}else if (pI2Cx == I2C3)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <I2C_PeriClockControl+0xb4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d129      	bne.n	8000af2 <I2C_PeriClockControl+0x9a>
			I2C3_PCLK_EN();
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <I2C_PeriClockControl+0xac>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a18      	ldr	r2, [pc, #96]	; (8000b04 <I2C_PeriClockControl+0xac>)
 8000aa4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000aaa:	e022      	b.n	8000af2 <I2C_PeriClockControl+0x9a>
		if(EnorDi == DISABLE)
 8000aac:	78fb      	ldrb	r3, [r7, #3]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d11f      	bne.n	8000af2 <I2C_PeriClockControl+0x9a>
				if(pI2Cx == I2C1)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <I2C_PeriClockControl+0xa8>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d106      	bne.n	8000ac8 <I2C_PeriClockControl+0x70>
					I2C1_PCLK_DIS();
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <I2C_PeriClockControl+0xac>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <I2C_PeriClockControl+0xac>)
 8000ac0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ac6:	e014      	b.n	8000af2 <I2C_PeriClockControl+0x9a>
				}else if (pI2Cx == I2C2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <I2C_PeriClockControl+0xb0>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d106      	bne.n	8000ade <I2C_PeriClockControl+0x86>
					I2C2_PCLK_DIS();
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <I2C_PeriClockControl+0xac>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <I2C_PeriClockControl+0xac>)
 8000ad6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000ada:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000adc:	e009      	b.n	8000af2 <I2C_PeriClockControl+0x9a>
				}else if (pI2Cx == I2C3)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <I2C_PeriClockControl+0xb4>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d105      	bne.n	8000af2 <I2C_PeriClockControl+0x9a>
					I2C3_PCLK_DIS();
 8000ae6:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <I2C_PeriClockControl+0xac>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a06      	ldr	r2, [pc, #24]	; (8000b04 <I2C_PeriClockControl+0xac>)
 8000aec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40005400 	.word	0x40005400
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40005800 	.word	0x40005800
 8000b0c:	40005c00 	.word	0x40005c00

08000b10 <Get_PLLOutputClock>:
/**************************************************************************************************************************/
uint32_t Get_PLLOutputClock(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
	uint32_t pllclk;
return pllclk;
 8000b16:	687b      	ldr	r3, [r7, #4]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <RCC_GetPCLK1Value>:
uint8_t AHB_PreScalar[8] ={2,4,8,16,64,128,256,512};
uint8_t APB1_PreScalar[4]= {2,4,8,16};
uint32_t  RCC_GetPCLK1Value(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
uint32_t pclk1,SystemClk;
uint8_t clksrc, temp ,ahbp, apb1p;    //ahbp is AHB pre scalar and apb1p is APB1 pre scalar

clksrc =(RCC->CFGR >>2) & 0x3;   //getting values of bit 2 and 3 into clksrc
 8000b2a:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <RCC_GetPCLK1Value+0x9c>)
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	089b      	lsrs	r3, r3, #2
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	f003 0303 	and.w	r3, r3, #3
 8000b36:	727b      	strb	r3, [r7, #9]

if(clksrc == 0)
 8000b38:	7a7b      	ldrb	r3, [r7, #9]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d102      	bne.n	8000b44 <RCC_GetPCLK1Value+0x20>
{
	SystemClk = 16000000;   //16Mhz
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <RCC_GetPCLK1Value+0xa0>)
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	e00b      	b.n	8000b5c <RCC_GetPCLK1Value+0x38>
}else if(clksrc==1)
 8000b44:	7a7b      	ldrb	r3, [r7, #9]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d102      	bne.n	8000b50 <RCC_GetPCLK1Value+0x2c>
{
	SystemClk= 8000000; //8Mhz
 8000b4a:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <RCC_GetPCLK1Value+0xa4>)
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	e005      	b.n	8000b5c <RCC_GetPCLK1Value+0x38>
}else if(clksrc==2)
 8000b50:	7a7b      	ldrb	r3, [r7, #9]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d102      	bne.n	8000b5c <RCC_GetPCLK1Value+0x38>
{
	SystemClk = Get_PLLOutputClock();
 8000b56:	f7ff ffdb 	bl	8000b10 <Get_PLLOutputClock>
 8000b5a:	60f8      	str	r0, [r7, #12]
}
	//for AHB
 temp= (RCC->CFGR>>4) & 0xF;
 8000b5c:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <RCC_GetPCLK1Value+0x9c>)
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	091b      	lsrs	r3, r3, #4
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	f003 030f 	and.w	r3, r3, #15
 8000b68:	723b      	strb	r3, [r7, #8]
 if(temp<8)
 8000b6a:	7a3b      	ldrb	r3, [r7, #8]
 8000b6c:	2b07      	cmp	r3, #7
 8000b6e:	d802      	bhi.n	8000b76 <RCC_GetPCLK1Value+0x52>
 {
	 ahbp =1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	72fb      	strb	r3, [r7, #11]
 8000b74:	e004      	b.n	8000b80 <RCC_GetPCLK1Value+0x5c>
 }else
 {
	 ahbp=AHB_PreScalar[temp-8];
 8000b76:	7a3b      	ldrb	r3, [r7, #8]
 8000b78:	3b08      	subs	r3, #8
 8000b7a:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <RCC_GetPCLK1Value+0xa8>)
 8000b7c:	5cd3      	ldrb	r3, [r2, r3]
 8000b7e:	72fb      	strb	r3, [r7, #11]
 }
    //for APB1
 temp= (RCC->CFGR>>10) & 0x7;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <RCC_GetPCLK1Value+0x9c>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	0a9b      	lsrs	r3, r3, #10
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	f003 0307 	and.w	r3, r3, #7
 8000b8c:	723b      	strb	r3, [r7, #8]
 if(temp<4)
 8000b8e:	7a3b      	ldrb	r3, [r7, #8]
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	d802      	bhi.n	8000b9a <RCC_GetPCLK1Value+0x76>
 {
	 apb1p =1;
 8000b94:	2301      	movs	r3, #1
 8000b96:	72bb      	strb	r3, [r7, #10]
 8000b98:	e004      	b.n	8000ba4 <RCC_GetPCLK1Value+0x80>
 }else
 {
	 ahbp=APB1_PreScalar[temp-4];
 8000b9a:	7a3b      	ldrb	r3, [r7, #8]
 8000b9c:	3b04      	subs	r3, #4
 8000b9e:	4a0c      	ldr	r2, [pc, #48]	; (8000bd0 <RCC_GetPCLK1Value+0xac>)
 8000ba0:	5cd3      	ldrb	r3, [r2, r3]
 8000ba2:	72fb      	strb	r3, [r7, #11]
 }
pclk1 =(SystemClk/ahbp)/apb1p;
 8000ba4:	7afb      	ldrb	r3, [r7, #11]
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bac:	7abb      	ldrb	r3, [r7, #10]
 8000bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb2:	607b      	str	r3, [r7, #4]
return pclk1;
 8000bb4:	687b      	ldr	r3, [r7, #4]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	00f42400 	.word	0x00f42400
 8000bc8:	007a1200 	.word	0x007a1200
 8000bcc:	20000020 	.word	0x20000020
 8000bd0:	20000028 	.word	0x20000028

08000bd4 <I2C_Init>:
 * @return            -
 *
 * @Note              -
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2101      	movs	r1, #1
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff36 	bl	8000a58 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_ACKControl << 10;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	029b      	lsls	r3, r3, #10
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 8000c04:	f7ff ff8e 	bl	8000b24 <RCC_GetPCLK1Value>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	4b47      	ldr	r3, [pc, #284]	; (8000d28 <I2C_Init+0x154>)
 8000c0c:	fba3 2302 	umull	r2, r3, r3, r2
 8000c10:	0c9b      	lsrs	r3, r3, #18
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c22:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7a1b      	ldrb	r3, [r3, #8]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c3c:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	4a36      	ldr	r2, [pc, #216]	; (8000d2c <I2C_Init+0x158>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d80f      	bhi.n	8000c78 <I2C_Init+0xa4>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000c58:	f7ff ff64 	bl	8000b24 <RCC_GetPCLK1Value>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c68:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000c6a:	897b      	ldrh	r3, [r7, #10]
 8000c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c70:	68fa      	ldr	r2, [r7, #12]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	e02c      	b.n	8000cd2 <I2C_Init+0xfe>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c7e:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	691b      	ldr	r3, [r3, #16]
 8000c84:	039b      	lsls	r3, r3, #14
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d10b      	bne.n	8000cac <I2C_Init+0xd8>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000c94:	f7ff ff46 	bl	8000b24 <RCC_GetPCLK1Value>
 8000c98:	4601      	mov	r1, r0
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	4413      	add	r3, r2
 8000ca4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ca8:	817b      	strh	r3, [r7, #10]
 8000caa:	e00c      	b.n	8000cc6 <I2C_Init+0xf2>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8000cac:	f7ff ff3a 	bl	8000b24 <RCC_GetPCLK1Value>
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	009a      	lsls	r2, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cc4:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF); //we wanted just 12bits of uint16_t ccrvalue variable
 8000cc6:	897b      	ldrh	r3, [r7, #10]
 8000cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	619a      	str	r2, [r3, #24]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <I2C_Init+0x158>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d809      	bhi.n	8000cf8 <I2C_Init+0x124>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8000ce4:	f7ff ff1e 	bl	8000b24 <RCC_GetPCLK1Value>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <I2C_Init+0x154>)
 8000cec:	fba3 2302 	umull	r2, r3, r3, r2
 8000cf0:	0c9b      	lsrs	r3, r3, #18
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	e00d      	b.n	8000d14 <I2C_Init+0x140>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 8000cf8:	f7ff ff14 	bl	8000b24 <RCC_GetPCLK1Value>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000d02:	fb03 f302 	mul.w	r3, r3, r2
 8000d06:	0a5b      	lsrs	r3, r3, #9
 8000d08:	4a09      	ldr	r2, [pc, #36]	; (8000d30 <I2C_Init+0x15c>)
 8000d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0e:	09db      	lsrs	r3, r3, #7
 8000d10:	3301      	adds	r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000d1e:	61da      	str	r2, [r3, #28]

}
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	431bde83 	.word	0x431bde83
 8000d2c:	000186a0 	.word	0x000186a0
 8000d30:	00044b83 	.word	0x00044b83

08000d34 <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegisDef_t *pI2Cx , uint32_t FlagName)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	691a      	ldr	r2, [r3, #16]
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	4013      	ands	r3, r2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e000      	b.n	8000d50 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fde8 	bl	8000944 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8000d74:	bf00      	nop
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ffd9 	bl	8000d34 <I2C_GetFlagStatus>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0f6      	beq.n	8000d76 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	78fa      	ldrb	r2, [r7, #3]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fde7 	bl	8000964 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8000d96:	bf00      	nop
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2102      	movs	r1, #2
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ffc8 	bl	8000d34 <I2C_GetFlagStatus>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f6      	beq.n	8000d98 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8000daa:	68f8      	ldr	r0, [r7, #12]
 8000dac:	f7ff fdf0 	bl	8000990 <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 8000db0:	e014      	b.n	8000ddc <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 8000db2:	bf00      	nop
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ffba 	bl	8000d34 <I2C_GetFlagStatus>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d0f6      	beq.n	8000db4 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	781a      	ldrb	r2, [r3, #0]
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	60da      	str	r2, [r3, #12]
		pTxbuffer++;
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]
		Len--;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1e7      	bne.n	8000db2 <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8000de2:	bf00      	nop
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2180      	movs	r1, #128	; 0x80
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ffa2 	bl	8000d34 <I2C_GetFlagStatus>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d0f6      	beq.n	8000de4 <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 8000df6:	bf00      	nop
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff98 	bl	8000d34 <I2C_GetFlagStatus>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d0f6      	beq.n	8000df8 <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 8000e0a:	7e3b      	ldrb	r3, [r7, #24]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d104      	bne.n	8000e1a <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fdf3 	bl	8000a00 <I2C_GenerateStopCondition>

}
 8000e1a:	bf00      	nop
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <I2C_ManageAcking>:

}


void I2C_ManageAcking(I2C_RegisDef_t *pI2Cx, uint8_t EnorDi)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_EN)
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d106      	bne.n	8000e42 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 8000e40:	e005      	b.n	8000e4e <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	601a      	str	r2, [r3, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <__libc_init_array>:
 8000e5c:	b570      	push	{r4, r5, r6, lr}
 8000e5e:	4e0d      	ldr	r6, [pc, #52]	; (8000e94 <__libc_init_array+0x38>)
 8000e60:	4c0d      	ldr	r4, [pc, #52]	; (8000e98 <__libc_init_array+0x3c>)
 8000e62:	1ba4      	subs	r4, r4, r6
 8000e64:	10a4      	asrs	r4, r4, #2
 8000e66:	2500      	movs	r5, #0
 8000e68:	42a5      	cmp	r5, r4
 8000e6a:	d109      	bne.n	8000e80 <__libc_init_array+0x24>
 8000e6c:	4e0b      	ldr	r6, [pc, #44]	; (8000e9c <__libc_init_array+0x40>)
 8000e6e:	4c0c      	ldr	r4, [pc, #48]	; (8000ea0 <__libc_init_array+0x44>)
 8000e70:	f000 f818 	bl	8000ea4 <_init>
 8000e74:	1ba4      	subs	r4, r4, r6
 8000e76:	10a4      	asrs	r4, r4, #2
 8000e78:	2500      	movs	r5, #0
 8000e7a:	42a5      	cmp	r5, r4
 8000e7c:	d105      	bne.n	8000e8a <__libc_init_array+0x2e>
 8000e7e:	bd70      	pop	{r4, r5, r6, pc}
 8000e80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e84:	4798      	blx	r3
 8000e86:	3501      	adds	r5, #1
 8000e88:	e7ee      	b.n	8000e68 <__libc_init_array+0xc>
 8000e8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e8e:	4798      	blx	r3
 8000e90:	3501      	adds	r5, #1
 8000e92:	e7f2      	b.n	8000e7a <__libc_init_array+0x1e>
 8000e94:	08000ebc 	.word	0x08000ebc
 8000e98:	08000ebc 	.word	0x08000ebc
 8000e9c:	08000ebc 	.word	0x08000ebc
 8000ea0:	08000ec0 	.word	0x08000ec0

08000ea4 <_init>:
 8000ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea6:	bf00      	nop
 8000ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eaa:	bc08      	pop	{r3}
 8000eac:	469e      	mov	lr, r3
 8000eae:	4770      	bx	lr

08000eb0 <_fini>:
 8000eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb2:	bf00      	nop
 8000eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eb6:	bc08      	pop	{r3}
 8000eb8:	469e      	mov	lr, r3
 8000eba:	4770      	bx	lr
