/*
 * usart_driver.c
 *
 *  Created on: Apr 2, 2020
 *      Author: Sarthak
 */


#include "usart_driver.h"



/******************************************************************************************
 *								APIs supported by this driver
 *		 For more information about the APIs check the function definitions
 ******************************************************************************************/
/*
 * Peripheral Clock setup
 */
/**
 *
 * @param pUSARTx
 * @param EnorDi
 */
void USART_PeriClockControl(USART_RegisDef_t *pUSARTx, uint8_t EnorDi)
{

}

/*
 * Init and De-init
 */
/**
 *
 * @param pUSARTHandle
 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{

}
/**
 *
 * @param pUSARTx
 */
void USART_DeInit(USART_RegisDef_t *pUSARTx)
{

}


/*
 * Data Send and Receive
 */
/**
 *
 * @param pUSARTx
 * @param pTxBuffer
 * @param Len
 */
void USART_SendData(USART_RegisDef_t *pUSARTx,uint8_t *pTxBuffer, uint32_t Len)
{

}
/**
 *
 * @param pUSARTx
 * @param pRxBuffer
 * @param Len
 */
void USART_ReceiveData(USART_RegisDef_t *pUSARTx, uint8_t *pRxBuffer, uint32_t Len)
{

}
/**
 *
 * @param pUSARTHandle
 * @param pTxBuffer
 * @param Len
 * @return
 */
uint8_t USART_SendDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pTxBuffer, uint32_t Len)
{

}
/**
 *
 * @param pUSARTHandle
 * @param pRxBuffer
 * @param Len
 * @return
 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{

}

/*
 * IRQ Configuration and ISR handling
 */
/**
 *
 * @param IRQNumber
 * @param EnorDi
 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{

}
/**
 *
 * @param IRQNumber
 * @param IRQPriority
 */
void USART_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{

}
/**
 *
 * @param pHandle
 */
void USART_IRQHandling(USART_Handle_t *pHandle)
{

}

/*
 * Other Peripheral Control APIs
 */

/**
 *
 * @param pUSARTx
 * @param EnOrDi
 */
void USART_PeripheralControl(USART_RegisDef_t *pUSARTx, uint8_t EnOrDi)
{

}
/**
 *
 * @param pUSARTx
 * @param FlagName
 * @return
 */
uint8_t USART_GetFlagStatus(USART_RegisDef_t *pUSARTx , uint32_t FlagName)
{

}
/**
 *
 * @param pUSARTx
 * @param StatusFlagName
 */
void USART_ClearFlag(USART_RegisDef_t *pUSARTx, uint16_t StatusFlagName)
{

}

/*
 * Application callback
 */
/**
 *
 * @param pUSARTHandle
 * @param AppEv
 */
void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle,uint8_t AppEv)
{

}

